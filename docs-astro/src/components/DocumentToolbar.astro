---
export interface Props {
  slug: string;
}

const { slug } = Astro.props;

// Generate the llms.txt path
const llmsTxtPath = `/llms/${slug}.txt`;
---

<div class="document-toolbar" data-llm-ignore="true">
  <button
    class="toolbar-button copy-markdown-btn"
    data-llms-path={llmsTxtPath}
    type="button"
    aria-label="Copy Markdown"
  >
    Copy Markdown
    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="icon">
      <rect width="256" height="256" fill="none"></rect>
      <path d="M184,64H40a8,8,0,0,0-8,8V216a8,8,0,0,0,8,8H184a8,8,0,0,0,8-8V72A8,8,0,0,0,184,64Zm-8,144H48V80H176ZM224,40V184a8,8,0,0,1-16,0V48H72a8,8,0,0,1,0-16H216A8,8,0,0,1,224,40Z"></path>
    </svg>
  </button>
  
  <a
    class="toolbar-button llms-txt-link"
    href={llmsTxtPath}
    target="_blank"
    rel="noopener noreferrer"
    aria-label="View llms.txt"
  >
    llms.txt
    <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="icon">
      <rect width="256" height="256" fill="none"></rect>
      <path d="M200,64V168a8,8,0,0,1-16,0V83.31L69.66,197.66a8,8,0,0,1-11.32-11.32L172.69,72H88a8,8,0,0,1,0-16H192A8,8,0,0,1,200,64Z"></path>
    </svg>
  </a>
</div>

<style>
  .document-toolbar {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
    padding-top: 0.5rem;
  }

  .toolbar-button {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.5rem;
    font-size: 0.75rem;
    line-height: 1rem;
    font-weight: 600;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.25rem;
    background-color: transparent;
    color: var(--sl-color-gray-2);
    text-decoration: none;
    transition: all 0.2s ease;
    cursor: pointer;
    height: 1.75rem;
    max-height: 1.75rem;
  }

  .toolbar-button:hover {
    background-color: var(--sl-color-gray-6);
    color: var(--sl-color-white);
    border-color: var(--sl-color-gray-4);
  }

  .icon {
    width: 0.875rem;
    height: 0.875rem;
    margin-bottom: 0.125rem;
  }

  /* Feedback states */
  .toolbar-button.success {
    background-color: var(--sl-color-green);
    color: white;
    border-color: var(--sl-color-green);
  }

  .toolbar-button.error {
    background-color: var(--sl-color-red);
    color: white;
    border-color: var(--sl-color-red);
  }

  /* Dark mode adjustments */
  :global([data-theme='light']) .toolbar-button {
    border-color: var(--sl-color-gray-4);
    color: var(--sl-color-gray-3);
  }

  :global([data-theme='light']) .toolbar-button:hover {
    background-color: var(--sl-color-gray-6);
    border-color: var(--sl-color-gray-3);
  }
</style>

<script>
  // Copy to clipboard functionality
  document.addEventListener('astro:page-load', () => {
    const copyButtons = document.querySelectorAll('.copy-markdown-btn');
    
    copyButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        const btn = e.currentTarget as HTMLButtonElement;
        const llmsPath = btn.dataset.llmsPath;
        
        if (!llmsPath) {
          console.error('No llms path specified');
          return;
        }
        
        try {
          // Fetch the content from the llms.txt file
          const response = await fetch(llmsPath);
          if (!response.ok) {
            throw new Error(`Failed to fetch ${llmsPath}: ${response.statusText}`);
          }
          
          const content = await response.text();
          await navigator.clipboard.writeText(content);
          
          // Show success state
          btn.classList.add('success');
          const originalText = btn.innerHTML;
          btn.innerHTML = 'Copied! <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 256 256" class="icon"><rect width="256" height="256" fill="none"></rect><path d="M229.66,77.66l-128,128a8,8,0,0,1-11.32,0l-56-56a8,8,0,0,1,11.32-11.32L96,188.69,218.34,66.34a8,8,0,0,1,11.32,11.32Z"></path></svg>';
          
          // Reset after 2 seconds
          setTimeout(() => {
            btn.classList.remove('success');
            btn.innerHTML = originalText;
          }, 2000);
        } catch (err) {
          console.error('Failed to copy:', err);
          
          // Show error state
          btn.classList.add('error');
          const originalText = btn.innerHTML;
          btn.innerHTML = 'Failed to copy';
          
          // Reset after 2 seconds
          setTimeout(() => {
            btn.classList.remove('error');
            btn.innerHTML = originalText;
          }, 2000);
        }
      });
    });
  });
</script>